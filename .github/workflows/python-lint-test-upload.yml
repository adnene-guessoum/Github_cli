name: Python package 

on: [push, pull_request] 

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix: 
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version}}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

            # Load our cached dependencies to speed things up.
            # You will get more motivation for this extra stuff
            # one you waited minutes.
            
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Task
        # TODO
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d

          # Install pip as package manager
      - name: Install and upgrade pip and poetry
        run: |
          python -m pip install --upgrade pip poetry

          # Install dependencies through task
      - name: Install Dependencies
        run: |
          ./bin/task install

          # Run our linting
      - name: Lint code
        run: |
          ./bin/task lint

          # Run the unit tests
      - name: Test code
        run: |
          ./bin/task test


  test-publish:
    needs: [build]

    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.extract_version.outputs.version }}

    steps:
      # Check out source code with this action again. You
      # need to do this in every job.
      - uses: actions/checkout@v2

      # This is something more advanced but a step can have
      # outputs which can be used in other steps.
      # We extract from the toml file the version here
      # and set it in a very very odd syntax as the output.
      - name: Remember version
        id: extract_version
        run: |
          VERSION=$(cat pyproject.toml | grep -oE -m 1 "version = \"(.*)\"" | cut -f2 -d '"')
          echo "Version: $VERSION"
          echo "::set-output name=version::$VERSION"

      # For publishing just pick a python version
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      # Installing task ... again
      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d

      # Load our cached dependencies to speed things up.
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies ... again
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip poetry
          ./bin/task install

      - name: Build packages for release
        run: |
          ./bin/task build

      # twine can skip existing which avoids any tries
      # to upload multiple times.
      - name: Publish distribution to Test PyPI
        env:
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
          TWINE_USERNAME: __token__
          TWINE_NON_INTERACTIVE: 1
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: poetry run twine upload --skip-existing --verbose 'dist/*'


  publish:
    needs: [test-publish]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade poetry pip
          poetry upgrade
          ./bin/task install

      - name: Build packages for release
        run: |
          ./bin/task build

      - name: Save packages as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
          if-no-files-found: error

      - name: Publish distribution to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_NON_INTERACTIVE: 1
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry run twine upload --verbose 'dist/*'

